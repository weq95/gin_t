use std::{
    collections::HashMap, net::SocketAddr,
    path::PathBuf,
    sync::Arc,
};

use axum::{
    extract::{
        WebSocketUpgrade,
        ws::Message,
        ws::WebSocket,
    },
    http::StatusCode,
    response::IntoResponse,
    Router,
    routing::{get, get_service},
    TypedHeader,
};
use lazy_static::lazy_static;
use serde_json::Value;
use tower_http::{
    services::ServeDir,
    trace::{DefaultMakeSpan, TraceLayer},
};
use tracing_subscriber::{
    layer::SubscriberExt,
    util::SubscriberInitExt,
};

async fn ws_handler(ws: WebSocketUpgrade, agent: Option<TypedHeader<headers::UserAgent>>) -> impl IntoResponse {
    if let Some(TypedHeader(agent)) = agent {
        println!("`{} connected", agent.as_str());
    }

    ws.on_upgrade(handle_socket)
}

async fn handle_socket(mut socket: WebSocket) {
    loop {
        let msg = socket.recv().await.unwrap().ok().unwrap();
        match msg {
            Message::Text(t) => {
                /// 执行协议转发, 从而实现业务逻辑和路由器分离
                let data: Value = t.parse::<Value>().unwrap();

                get_user(&data.clone().into());
            }
            Message::Binary(_) => {
                println!("client sent binary data");
            }
            Message::Ping(_) => {
                println!("socket ping");
            }
            Message::Pong(_) => {
                println!("socket pong");
            }
            Message::Close(_) => {
                println!("client disconnected");
                return;
            }
        }


        if socket.send(Message::Text("Hi Rust".to_string())).await.is_err() {
            println!("client disconnected");
            return;
        }


        //     tokio::time::sleep(Duration::from_micros(3)).await;
    }
}

#[derive(Debug, Clone)]
pub struct Users {
    pub id: u64,
    pub name: String,
    pub age: u8,
    pub school: String,
    pub content: String,
}

impl From<Value> for Users {
    fn from(_val: Value) -> Self {
        Self {
            id: _val.get("id").unwrap().as_u64().unwrap() as u64,
            name: _val.get("name").unwrap().to_string(),
            age: _val.get("age").unwrap().as_u64().unwrap() as u8,
            school: _val.get("school").unwrap().to_string(),
            content: _val.get("content").unwrap().to_string(),
        }
    }
}

fn get_user(info: &Users) {
    println!("get_user:  \r\n\t {:#?}", info)
}

#[tokio::main]
async fn main() {
    tracing_subscriber::registry().with(tracing_subscriber::fmt::layer()).init();

    let assets_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("assets");

    let app = Router::new().fallback(
        get_service(ServeDir::new(assets_dir).append_index_html_on_directories(true))
            .handle_error(|error: std::io::Error| async move {
                (
                    StatusCode::INTERNAL_SERVER_ERROR,
                    format!("Unhandled internal error: {}", error)
                )
            })
    ).route("/ws", get(ws_handler))
        .layer(TraceLayer::new_for_http().make_span_with(
            DefaultMakeSpan::default().include_headers(true)
        ));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    tracing::debug!("listening  on {}", addr);

    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}
